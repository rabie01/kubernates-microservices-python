version: "3.2"

dotenv: ['../.env']
tasks:
  svc:install-all:
    desc: Install all the services
    deps:
      - svc:install-auth
      - svc:install-converter
      - svc:install-gateway
      - svc:install-notification

  svc:install-auth:
    desc: Install authentication service
    cmds:
      - echo "üöÄ Deploying auth service..."
      - docker build -t $DOCKER_REPO/auth:latest -f ./auth-service/Dockerfile ./auth-service
      - docker login
      - docker push $DOCKER_REPO/auth:latest
      # - kind load docker-image $DOCKER_REPO/auth:latest
      - kubectl apply -f ./auth-service/manifest/. -n $NAMESPACE

  svc:install-converter:
    desc: Install converter service
    cmds:
      - echo "üöÄ Deploying converter service..."
      - docker build -t $DOCKER_REPO/converter:latest -f ./converter-service/Dockerfile ./converter-service
      - docker login
      - docker push $DOCKER_REPO/converter:latest
      # - kind load docker-image $DOCKER_REPO/converter:latest
      - kubectl apply -f ./converter-service/manifest/. -n $NAMESPACE

  svc:install-gateway:
    desc: Install gateway service
    cmds:
      - echo "üöÄ Deploying gateway service..."
      - docker build -t $DOCKER_REPO/gateway:latest -f ./gateway-service/Dockerfile ./gateway-service
      - docker login
      - docker push $DOCKER_REPO/gateway:latest
      # - kind load docker-image $DOCKER_REPO/gateway:latest
      - kubectl apply -f ./gateway-service/manifest/. -n $NAMESPACE

  svc:install-notification:
    desc: Install notification service
    cmds:
      - echo "üöÄ Deploying notification service..."
      - docker build -t $DOCKER_REPO/notification:latest -f ./notification-service/Dockerfile ./notification-service
      - docker login
      - docker push $DOCKER_REPO/notification:latest
      # - kind load docker-image $DOCKER_REPO/notification:latest
      - kubectl apply -f ./notification-service/manifest/. -n $NAMESPACE


  api:login:
    desc: "Login and get JWT token"
    cmds:
      - |
        echo $API_HOST
        echo "üîê Logging in to get JWT token..."
        # set -x  # Enable bash debug output
        TOKEN=$(curl -s -X POST http://$API_HOST:$API_PORT/login -u $LOGIN_EMAIL:$LOGIN_PASS)
        if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
          echo "‚ùå Failed to get JWT token."
          exit 1
        fi
        echo "‚úÖ JWT token obtained."
        echo "$TOKEN" > .jwt_token

  api:upload:
    desc: "Upload a video file using JWT token"
    deps: [api:login]
    cmds:
      - |
        set -x
        echo "üì§ Uploading video.mp4..."
        TOKEN=$(cat .jwt_token)
        curl -X POST -F 'file=@../assets/video.mp4' \
          -H "Authorization: Bearer $TOKEN" \
          http://$API_HOST:$API_PORT/upload | tee fid.txt

  api:download:
    desc: "Download audio file by file ID. Usage: task api:download -- FILE_ID=<your_id>"
    deps: [api:login]
    cmds:
      - |
        #set -x
        FILE_ID=$(jq -r .mp3_fid fid.txt)
        if [ -z $FILE_ID ]; then
          echo "‚ùó FILE_ID is required. Use: task api:download -- FILE_ID=abc123"
          exit 1
        fi
        echo "üì• Downloading audio for file ID {{.FILE_ID}}..."
        TOKEN=$(cat .jwt_token)
        curl --output ../assets/video.mp3 -X GET \
          -H "Authorization: Bearer $TOKEN" \
          "http://$API_HOST:$API_PORT/download?fid=$FILE_ID"


  api:test-all:
    desc: "Test full API flow: login, upload, download"
    cmds:
      - task: api:login
      - task: api:upload
      - |
        FILE_ID=$(jq -r .mp3_fid fid.txt)
        if [ -z $FILE_ID ]; then
          echo "‚ö†Ô∏è Skipping download: FILE_ID not provided."
        else
          task api:download -- FILE_ID=$FILE_ID
        fi






  debug-cmds:
    desc: common debugging commands
    cmds:
      - docker exec -it kind-control-plane crictl images ls  #list images locally available in a k8 node
      - kubectl cluster-info dump
      - kubectl logs podname -n <namespace>
      - kubectl describe pod <podname> -n <namespace>
      - kubectl get events -n <namespace>
      - kubectl get pods -n <namespace>
      - kubectl get svc -n <namespace>
      - kubectl get deployments --show-labels
      - kubectl rollout restart deploy <deploy>
      - k logs --selector=app=gateway
      - kubens <namespace>
      - kubetail <appname> #partial or full match of the pod name to get logs from multiple pods
      - stern <appname>  #partial or full match of the pod name to get logs from multiple pods


svc:uninstall-all:
  desc: Delete all service resources
  cmds:
    - kubectl delete -f ./auth-service/manifest/. -n $NAMESPACE || true
    - kubectl delete -f ./converter-service/manifest/. -n $NAMESPACE || true
    - kubectl delete -f ./gateway-service/manifest/. -n $NAMESPACE || true
    - kubectl delete -f ./notification-service/manifest/. -n $NAMESPACE || true
